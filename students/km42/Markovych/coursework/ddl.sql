CREATE TABLE PERFORMANCE_TABLE 
	(	"PERFORMANCE_ID" NUMBER(19,0) NOT NULL, 
	"TITLE" VARCHAR2(64 CHAR) NOT NULL,
	"DESCRIPTION" VARCHAR2(255 CHAR), 
	"DURATION" VARCHAR2(16 CHAR) NOT NULL, 
	"PERFORMANCE_DATE" TIMESTAMP NOT NULL,
	"AVAILABLE_PLACES" NUMBER(10, 0) NOT NULL,
	"THEATRE_ID" NUMBER(19,0),
	"DELETED" NUMBER(1,0) DEFAULT 0,
	CONSTRAINT PK_PERFORMANCE PRIMARY KEY ("PERFORMANCE_ID")
	);
	
CREATE TABLE RESERVATION_TABLE 
   (	"RESERVATION_ID" NUMBER(19,0) NOT NULL, 
	"PLACE_ROW" NUMBER(10,0) NOT NULL, 
	"PLACE_SIT" NUMBER(10,0) NOT NULL, 
	"RESERVATION_DATE" TIMESTAMP NOT NULL, 
	"PERFORMANCE_ID" NUMBER(19,0), 
	"USER_ID" NUMBER(19,0),
	CONSTRAINT PK_RESERVATION PRIMARY KEY ("RESERVATION_ID")
   );
   
CREATE TABLE ROLE_TABLE
   (	"ROLE_ID" NUMBER(19,0) NOT NULL, 
	"ROLE_NAME" VARCHAR2(16 CHAR) NOT NULL,
	"DELETED" NUMBER(1,0) DEFAULT 0,
	CONSTRAINT PK_ROLE PRIMARY KEY ("ROLE_ID")
   );
   
CREATE TABLE USER_TABLE
   (	"USER_ID" NUMBER(19,0) NOT NULL, 
	"EMAIL" VARCHAR2(255 CHAR) NOT NULL, 
	"FIRST_NAME" VARCHAR2(32 CHAR) NOT NULL, 
	"LAST_NAME" VARCHAR2(32 CHAR) NOT NULL, 
	"PASSWORD" VARCHAR2(60 CHAR) NOT NULL, 
	"ROLE_ID" NUMBER(19,0),
	"DELETED" NUMBER(1,0) DEFAULT 0,
	CONSTRAINT PK_USER PRIMARY KEY ("USER_ID")
   );
   
CREATE TABLE THEATRE_TABLE
	(	"THEATRE_ID" NUMBER(19,0) NOT NULL,
	"TITLE" VARCHAR2(64) NOT NULL,
	"LOCATION" VARCHAR(64) NOT NULL,
	"DELETED" NUMBER(1,0) DEFAULT 0,
	CONSTRAINT PK_THEATRE PRIMARY KEY ("THEATRE_ID")
	);
	
ALTER TABLE PERFORMANCE_TABLE ADD CONSTRAINT "FK_PERFORMANCE_THEATRE"
	FOREIGN KEY ("THEATRE_ID") REFERENCES THEATRE_TABLE ("THEATRE_ID");
   
ALTER TABLE RESERVATION_TABLE ADD CONSTRAINT "FK_PERFORMANCE_RESERVATION" 
	FOREIGN KEY ("PERFORMANCE_ID") REFERENCES PERFORMANCE_TABLE ("PERFORMANCE_ID");

ALTER TABLE RESERVATION_TABLE ADD CONSTRAINT "FK_USER_RESERVATION" 
	FOREIGN KEY ("USER_ID") REFERENCES USER_TABLE ("USER_ID");

ALTER TABLE USER_TABLE ADD CONSTRAINT "FK_ROLE_USER" 
	FOREIGN KEY ("ROLE_ID") REFERENCES ROLE_TABLE ("ROLE_ID");

ALTER TABLE RESERVATION_TABLE ADD CONSTRAINT "UK_RESERVATION" UNIQUE ("PERFORMANCE_ID", "PLACE_ROW", "PLACE_SIT");
ALTER TABLE RESERVATION_TABLE ADD CONSTRAINT "PLACE_SIT_CHECK" CHECK ("PLACE_SIT" BETWEEN 1 AND 10);
ALTER TABLE RESERVATION_TABLE ADD CONSTRAINT "PLACE_ROW_CHECK" CHECK ("PLACE_ROW" BETWEEN 1 AND 10);

ALTER TABLE PERFORMANCE_TABLE ADD CONSTRAINT "UK_PERFORMANCE_TITLE_THEATRE" UNIQUE("TITLE", "THEATRE_ID");
ALTER TABLE PERFORMANCE_TABLE ADD CONSTRAINT "PERFORMANCE_DESCRIPTION_CHECK" CHECK (REGEXP_LIKE("DESCRIPTION" , '^[A-z.,0-9 ]{1,255}$'));
ALTER TABLE PERFORMANCE_TABLE ADD CONSTRAINT "PERFORMANCE_TITLE_CHECK" CHECK (REGEXP_LIKE("TITLE" , '^[A-z.,0-9 ]{1,64}$'));
ALTER TABLE PERFORMANCE_TABLE ADD CONSTRAINT "PERFORMANCE_DURATION_CHECK" CHECK (REGEXP_LIKE("DURATION" , '^[A-z.,0-9 ]{1,16}$'));
ALTER TABLE PERFORMANCE_TABLE ADD CONSTRAINT "PERFORMANCE_AVAILABLE_CHEK" CHECK (AVAILABLE_PLACES BETWEEN 0 AND 100);

ALTER TABLE USER_TABLE ADD CONSTRAINT "UK_USER_EMAIL" UNIQUE ("EMAIL");
ALTER TABLE USER_TABLE ADD CONSTRAINT "USER_FIRST_NAME_CHECK" CHECK (REGEXP_LIKE("FIRST_NAME", '^[A-Z][a-zA-Z]{2,32}$'));
ALTER TABLE USER_TABLE ADD CONSTRAINT "USER_LAST_NAME_CHECK" CHECK (REGEXP_LIKE("LAST_NAME", '^[A-Z][a-zA-Z]{2,32}$'));
ALTER TABLE USER_TABLE ADD CONSTRAINT "USER_EMAIL_CHECK" CHECK (REGEXP_LIKE("EMAIL", '^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,7}$'));

ALTER TABLE ROLE_TABLE ADD CONSTRAINT "UK_ROLE_NAME" UNIQUE ("ROLE_NAME");
ALTER TABLE ROLE_TABLE ADD CONSTRAINT "ROLE_NAME_CHECK" CHECK ("ROLE_NAME" IN ('ROLE_ADMIN','ROLE_USER'));

ALTER TABLE THEATRE_TABLE ADD CONSTRAINT "UK_THEATRE_TITLE" UNIQUE("TITLE");
ALTER TABLE THEATRE_TABLE ADD CONSTRAINT "THEATRE_TITLE_CHECK" CHECK(REGEXP_LIKE("TITLE" , '^[A-z.,0-9 ]{1,64}$'));
ALTER TABLE THEATRE_TABLE ADD CONSTRAINT "THEATRE_LOCATION_CHECK" CHECK(REGEXP_LIKE("LOCATION" , '^[A-z.,:/0-9 ]{1,64}$'));

	
CREATE OR REPLACE VIEW PERFORMANCE AS 
	SELECT PERFORMANCE_ID, TITLE, DESCRIPTION, DURATION, PERFORMANCE_DATE, AVAILABLE_PLACES, THEATRE_ID FROM PERFORMANCE_TABLE
    WHERE DELETED != 1;
	
CREATE OR REPLACE VIEW RESERVATION AS
	SELECT RESERVATION_ID, PLACE_ROW, PLACE_SIT, RESERVATION_DATE, PERFORMANCE_ID, USER_ID  FROM RESERVATION_TABLE;

CREATE OR REPLACE VIEW ROLE AS
	SELECT ROLE_ID, ROLE_NAME FROM ROLE_TABLE
    WHERE DELETED != 1;
	
CREATE OR REPLACE VIEW USERS AS 
	SELECT USER_ID, EMAIL, FIRST_NAME, LAST_NAME, PASSWORD, ROLE_ID FROM USER_TABLE
    WHERE DELETED != 1;
	
CREATE OR REPLACE VIEW THEATRE AS 
	SELECT THEATRE_ID, TITLE, LOCATION FROM THEATRE_TABLE
	WHERE DELETED != 1;
	

/*SEQUENCE TRIGGERS*/

CREATE SEQUENCE USER_SEQ START WITH 1;
CREATE SEQUENCE PERFORMANCE_SEQ START WITH 1;
CREATE SEQUENCE RESERVATION_SEQ START WITH 1;
CREATE SEQUENCE ROLE_SEQ START WITH 1;
CREATE SEQUENCE THEATRE_SEQUENCE START WITH 1;

CREATE OR REPLACE TRIGGER USER_ID_TRIGGER 
BEFORE INSERT ON USER_TABLE
FOR EACH ROW
BEGIN
	IF (:NEW.USER_ID IS NULL) THEN
	:NEW.USER_ID := USER_SEQ.NEXTVAL;
	END IF;
END USER_ID_TRIGGER;
/

CREATE OR REPLACE TRIGGER PERFORMANCE_ID_TRIGGER 
BEFORE INSERT ON PERFORMANCE_TABLE
FOR EACH ROW
BEGIN
	IF(:NEW.PERFORMANCE_ID IS NULL) THEN
	:NEW.PERFORMANCE_ID := PERFORMANCE_SEQ.NEXTVAL;
	END IF;
END PERFORMANCE_ID_TRIGGER;
/

CREATE OR REPLACE TRIGGER RESERVATION_ID_TRIGGER 
BEFORE INSERT ON RESERVATION_TABLE
FOR EACH ROW
BEGIN
	IF(:NEW.RESERVATION_ID IS NULL) THEN
	:NEW.RESERVATION_ID := RESERVATION_SEQ.NEXTVAL;
	END IF;
END RESERVATION_ID_TRIGGER;
/

CREATE OR REPLACE TRIGGER ROLE_ID_TRIGGER 
BEFORE INSERT ON ROLE_TABLE
FOR EACH ROW
BEGIN
	IF (:NEW.ROLE_ID IS NULL) THEN
	:NEW.ROLE_ID := ROLE_SEQ.NEXTVAL;
	END IF;
END ROLE_ID_TRIGGER;
/

CREATE OR REPLACE TRIGGER THEATRE_ID 
BEFORE INSERT ON THEATRE_TABLE
FOR EACH ROW
BEGIN
	IF (:NEW.THEATRE_ID IS NULL) THEN
	:NEW.THEATRE_ID := THEATRE_SEQUENCE.NEXTVAL;
	END IF;
END THEATRE_ID;
/


/*VIEWS TRIGGERS*/

CREATE OR REPLACE TRIGGER USER_INSERT
INSTEAD OF INSERT ON USERS
FOR EACH ROW
BEGIN
	INSERT INTO USER_TABLE(EMAIL, FIRST_NAME, LAST_NAME, PASSWORD,ROLE_ID)
	VALUES (
	:NEW.EMAIL,
	:NEW.FIRST_NAME,
	:NEW.LAST_NAME,
	:NEW.PASSWORD,
	:NEW.ROLE_ID);
END;
/

CREATE OR REPLACE TRIGGER USER_DELETE
INSTEAD OF DELETE ON USERS
BEGIN
	UPDATE USER_TABLE
	SET DELETED = 1
	WHERE USER_ID = :OLD.USER_ID;
END;
/

CREATE OR REPLACE TRIGGER PERFORMANCE_INSERT
INSTEAD OF INSERT ON PERFORMANCE
FOR EACH ROW
BEGIN
	INSERT INTO PERFORMANCE_TABLE(TITLE, DESCRIPTION, DURATION, PERFORMANCE_DATE, AVAILABLE_PLACES, THEATRE_ID)
	VALUES (
	:NEW.TITLE,
	:NEW.DESCRIPTION,
	:NEW.DURATION,
	:NEW.PERFORMANCE_DATE,
	:NEW.AVAILABLE_PLACES,
	:NEW.THEATRE_ID);
END;
/

CREATE OR REPLACE TRIGGER PERFORMANCE_DELETE
INSTEAD OF DELETE ON PERFORMANCE
BEGIN
	UPDATE PERFORMANCE_TABLE
	SET DELETED = 1
	WHERE PERFORMANCE_ID = :OLD.PERFORMANCE_ID;
END;
/

CREATE OR REPLACE TRIGGER RESERVATION_INSERT
INSTEAD OF INSERT ON RESERVATION
FOR EACH ROW
BEGIN
	INSERT INTO RESERVATION_TABLE(PLACE_ROW, PLACE_SIT, RESERVATION_DATE, PERFORMANCE_ID, USER_ID)
	VALUES (
	:NEW.PLACE_ROW,
	:NEW.PLACE_SIT,
	SYSDATE,
	:NEW.PERFORMANCE_ID,
	:NEW.USER_ID);
END;
/

CREATE OR REPLACE TRIGGER ROLE_INSERT
INSTEAD OF INSERT ON ROLE
FOR EACH ROW
BEGIN
	INSERT INTO ROLE_TABLE(ROLE_NAME)
	VALUES (
	:NEW.ROLE_NAME);
END;
/

CREATE OR REPLACE TRIGGER ROLE_DELETE
INSTEAD OF DELETE ON ROLE
BEGIN
	UPDATE ROLE_TABLE
	SET DELETED = 1
	WHERE ROLE_ID = :OLD.ROLE_ID;
END;
/	

CREATE OR REPLACE TRIGGER THEATRE_INSERT
INSTEAD OF INSERT ON THEATRE
FOR EACH ROW
BEGIN
	INSERT INTO THEATRE_TABLE(TITLE, LOCATION)
	VALUES (
	:NEW.TITLE,
	:NEW.LOCATION);
END;
/

CREATE OR REPLACE TRIGGER THEATRE_DELETE
INSTEAD OF DELETE ON THEATRE
BEGIN
	UPDATE THEATRE_TABLE
	SET DELETED = 1
	WHERE THEATRE_ID = :OLD.THEATRE_ID;
END;
/	

CREATE OR REPLACE PACKAGE reservation_package AS

   PROCEDURE add_reservation
( place_row IN RESERVATION.PLACE_ROW%TYPE
, place_sit IN RESERVATION.PLACE_SIT%TYPE
, perf_id IN RESERVATION.PERFORMANCE_ID%TYPE
, user_id IN RESERVATION.USER_ID%TYPE
);

END reservation_package;

/

CREATE OR REPLACE PACKAGE BODY reservation_package AS
	PROCEDURE add_reservation
	( place_row IN RESERVATION.PLACE_ROW%TYPE
	, place_sit IN RESERVATION.PLACE_SIT%TYPE
	, perf_id IN RESERVATION.PERFORMANCE_ID%TYPE
	, user_id IN RESERVATION.USER_ID%TYPE
	) AS
	BEGIN 
		SAVEPOINT st_reservation;
		INSERT INTO RESERVATION(place_row, place_sit, performance_id, user_id)
			VALUES (place_row, place_sit, perf_id, user_id);
		UPDATE PERFORMANCE SET available_places = available_places - 1
		WHERE PERFORMANCE_ID = perf_id;
		EXCEPTION
			WHEN OTHERS THEN
		ROLLBACK TO st_reservation;
		RAISE; 
	END add_reservation;
END reservation_package;
/